[project]
name = "notify-api"
version = "5.0.0"
description = "This module is the BC Registries Notify API service."
authors = [{ name = "pwei1018", email = "patrick.wei@gov.bc.ca" }]
license = { text = "BSD-3-Clause" }
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "flask>=3.1.0",
    "flask-sqlalchemy>=3.1.1",
    "Flask-Cors>=4.0.1",
    "flask-migrate>=4.0.7",
    "Flask-Pydantic>=0.12.0",
    "python-dotenv>=1.0.1",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",
    "gunicorn>=23.0.0",
    "uvloop>=0.21.0",  # Performance boost for async operations
    "httpx>=0.28.0",   # Modern HTTP client
    "pycountry>=24.6.1",
    "email-validator>=2.2.0",
    "phonenumbers>=8.13.48",
    "beautifulsoup4>=4.12.3",
    "notifications-python-client>=9.0.0",
    "pg8000>=1.31.2",
    "cachecontrol>=0.14.0",
    "redis>=5.2.0",
    "cryptography>=43.0.0",
    "secure>=0.3.0",  # Security headers
    "flask-jwt-oidc",
    "gcp-queue",
    "structured-logging",
    "cloud-sql-connector",
]

[dependency-groups]
dev = [
  {include-group = "lint"},
  {include-group = "testing"}
]
lint = [
   "ruff"
]
testing = [
   "pytest",
   "pytest-cov",
   "pytest-mock",
   "pytest-html",
   "pytest-xdist",
   "requests-mock",
   "faker",
   "freezegun",
   "aiohttp",
]

[tool.uv]
managed = true
default-groups = ["dev"]

[tool.uv.sources]
flask-jwt-oidc = { git = "https://github.com/seeker25/flask-jwt-oidc.git", branch = "main" }
gcp-queue = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/gcp-queue", branch = "main" }
structured-logging = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/structured-logging", branch = "main" }
cloud-sql-connector = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/cloud-sql-connector", branch = "main" }

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    "venv",
    "migrations",
    "devops",
    ".history",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

# Enhanced configuration for performance and security
line-length = 120
indent-width = 4
target-version = "py312"

# Enable preview features for latest improvements
preview = true

# Show fixes in output
show-fixes = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "PL",  # pyLint
]
ignore = [
    "F401",
    "E501", # https://stackoverflow.com/questions/76771858/ruff-does-not-autofix-line-too-long-violation
    "B904", # use 'raise ... from err'
    "B905", # use explicit 'strict=' parameter with 'zip()'
    "N999",
    "PLR6301", #
    "PLC0415", # `import` should be at the top-level of a file
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-public-methods = 350
max-returns = 10

[tool.ruff.lint.isort]
known-first-party = ["notify_api"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pytest.ini_options]
# Enhanced pytest configuration for notify-api testing
minversion = "6.0"
pythonpath = ["src"]
testpaths = [
   "tests/unit",
]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--cov=src",
    "--cov-report=xml",
    "--cov-report=term",
]
python_files = [
   "test_*.py"
]
python_classes = [
   "Test*"
]
python_functions = [
   "test_*"
]
norecursedirs = [
   ".git",
   ".tox",
   "dist",
   "build",
   "*.egg",
   ".venv",
   "__pycache__",
   "node_modules",
   ".pytest_cache",
   "htmlcov"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
   "ignore::DeprecationWarning",
   "ignore::PendingDeprecationWarning",
   "ignore::UserWarning:flask_sqlalchemy.*",
   "ignore::UserWarning:sqlalchemy.*",
   "ignore::RuntimeWarning",
   "ignore::pytest.PytestUnraisableExceptionWarning",
   "error::FutureWarning"
]
markers = [
   "unit: Unit tests with mocked dependencies",
   "integration: Integration tests requiring external services",
   "api: API endpoint tests",
   "services: Service layer tests",
   "models: Database model tests",
   "mock: Tests using comprehensive mocking",
   "slow: Tests that take longer than normal to run",
   "concurrent: Tests that simulate concurrent operations",
   "validation: Input validation tests",
   "error_handling: Error handling and edge case tests",
   "auth: Authentication and authorization tests",
   "rate_limiting: Rate limiting tests",
   "performance: Performance-focused tests",
   "serial: Tests that must run in serial"
]
required_plugins = [
   "pytest-cov",
   "pytest-mock",
   "pytest-html",
   "pytest-xdist"
]

[tool.coverage.run]
branch = true
source = [
   "src/notify_api",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]